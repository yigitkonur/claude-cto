name: Release Pipeline (PyPI, Homebrew, Smithery)

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags only
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.5.2)'
        required: true
        type: string
      test_pypi:
        description: 'Publish to Test PyPI first'
        required: false
        default: false
        type: boolean

# Prevent multiple concurrent releases
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write  # For trusted PyPI publishing
  attestations: write  # For Docker attestations

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      run: |
        pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: poetry install --no-interaction --no-root
    
    - name: Build package
      run: poetry build
    
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test-pypi:
    name: Publish to Test PyPI
    if: github.event.inputs.test_pypi == 'true'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/claude-cto
    
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish:
    name: Publish to PyPI
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/claude-cto
    
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  verify:
    name: Verify installation
    needs: publish
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Wait for PyPI to update
      run: sleep 60
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install from PyPI
      run: |
        pip install claude-cto[full]
        claude-cto --help
        python -c "import claude_cto; print(f'Successfully imported claude_cto')"

  docker-build:
    name: Build and Push Docker Image
    needs: publish
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        else
          # Extract version from tag, removing 'v' prefix
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: yigitkonur35
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          yigitkonur35/claude-cto:latest
          yigitkonur35/claude-cto:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-homebrew:
    name: Update Homebrew Formula
    needs: [publish, docker-build]
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_pypi == 'false'
    steps:
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        else
          # Extract version from tag, removing 'v' prefix
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        fi
    
    - name: Trigger Homebrew tap update
      # HOMEBREW_TAP_TOKEN must be a PAT with 'repo' scope for the homebrew-claude-cto repository
      # Create at: https://github.com/settings/tokens/new?scopes=repo&description=Homebrew%20tap%20updates
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        repository: yigitkonur/homebrew-claude-cto
        event-type: update-formula
        client-payload: '{"version": "${{ steps.version.outputs.version }}"}'
    
    - name: Create Homebrew update PR
      run: |
        echo "Homebrew formula update triggered for version ${{ steps.version.outputs.version }}"
        echo "Check https://github.com/yigitkonur/homebrew-claude-cto for the update PR"

  deploy-smithery:
    name: Deploy to Smithery Registry
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_pypi == 'false'
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        else
          # Extract version from tag, removing 'v' prefix
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        fi
    
    - name: Update smithery.yaml version
      run: |
        sed -i "s/version: \".*\"/version: \"${{ steps.version.outputs.version }}\"/" smithery.yaml
    
    - name: Commit smithery.yaml update
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add smithery.yaml
        git diff --staged --quiet || git commit -m "chore: update smithery.yaml to v${{ steps.version.outputs.version }} [skip ci]"
        git push origin HEAD:main || echo "No changes to push"
    
    - name: Notify Smithery
      run: |
        echo "üöÄ Smithery will auto-detect the new Docker image at:"
        echo "   ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}"
        echo ""
        echo "üì¶ Users can install via: smithery install claude-cto"

  create-github-release:
    name: Create GitHub Release
    needs: [publish, docker-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: |
        # Extract version from tag, removing 'v' prefix
        VERSION="${GITHUB_REF#refs/tags/}"
        VERSION="${VERSION#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## üóø Claude CTO v${{ steps.version.outputs.version }}
          
          ### Installation Methods
          
          **PyPI:**
          ```bash
          pip install claude-cto[full]==${{ steps.version.outputs.version }}
          ```
          
          **Homebrew:**
          ```bash
          brew tap yigitkonur/claude-cto
          brew install claude-cto
          ```
          
          **Smithery (MCP):**
          ```bash
          smithery install claude-cto
          ```
          
          **Docker:**
          ```bash
          docker pull ghcr.io/yigitkonur/claude-cto:${{ steps.version.outputs.version }}
          ```
          
          ### What's Changed
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          
          ### Resources
          - üìö [Documentation](https://github.com/${{ github.repository }})
          - üêç [PyPI Package](https://pypi.org/project/claude-cto/)
          - üç∫ [Homebrew Tap](https://github.com/yigitkonur/homebrew-claude-cto)
          - üîß [Smithery Registry](https://smithery.ai/server/claude-cto)
        files: dist/*
        draft: false
        prerelease: false