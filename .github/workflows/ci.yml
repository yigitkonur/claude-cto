name: CI Checks

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --extras full
    
    - name: Install package
      run: poetry install --no-interaction --extras full
    
    - name: Check code formatting
      run: |
        poetry run black --check claude_cto/
    
    - name: Check code quality
      run: |
        poetry run ruff check claude_cto/

  docker-test:
    name: Test Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: claude-cto:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm claude-cto:test --help
        docker run --rm claude-cto:test mcp --help

  validate-config:
    name: Validate Configuration Files
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate smithery.yaml
      run: |
        if ! [ -f smithery.yaml ]; then
          echo "smithery.yaml not found"
          exit 1
        fi
        # Basic YAML validation
        python -c "import yaml; yaml.safe_load(open('smithery.yaml'))"
    
    - name: Validate docker-compose.yml
      run: |
        if ! [ -f docker-compose.yml ]; then
          echo "docker-compose.yml not found"
          exit 1
        fi
        # Validate docker-compose syntax
        docker compose config > /dev/null